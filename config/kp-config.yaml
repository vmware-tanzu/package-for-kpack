#! Copyright 2021 VMware, Inc.
#! SPDX-License-Identifier: Apache-2.0

#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
#@ load("@ytt:assert", "assert")

#@ if data.values.kp_default_repository != "":
#! extract the docker registry from the repository string
#@    kp_default_registry = "https://index.docker.io/v1/"
#@    parts = data.values.kp_default_repository.split("/", 1)
#@  if len(parts) == 2:
#@    if '.' in parts[0] or ':' in parts[0]:
#@      kp_default_registry = parts[0]
#@    end
#@  elif len(parts) == 1:
#@    assert.fail("kp_default_repository must be a valid writeable repository and must include a '/'")
#@  end

#@ if data.values.kp_default_repository_secret.name and data.values.kp_default_repository_username:
#@  assert.fail("must only use one of kp_default_repository_secret or kp_default_repository creds")
#@ end

#@ secret_name = "kp-default-repository-secret"
#@ if data.values.kp_default_repository_secret.name != "":
#@ secret_name = data.values.kp_default_repository_secret.name
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: #@ data.values.kp_default_repository_secret.name
  namespace: #@ data.values.kp_default_repository_secret.namespace
spec:
  toNamespace: kpack
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: #@ data.values.kp_default_repository_secret.name
  namespace: kpack
spec:
  fromNamespace: #@ data.values.kp_default_repository_secret.namespace
#@ else:
#@  data.values.kp_default_repository_username or assert.fail("missing kp_default_repository_username")
#@  data.values.kp_default_repository_password or assert.fail("missing kp_default_repository_password")
#@
#@  kp_default_docker_auth = base64.encode("{}:{}".format(data.values.kp_default_repository_username, data.values.kp_default_repository_password))
#@  kp_default_docker_creds = {"username": data.values.kp_default_repository_username, "password": data.values.kp_default_repository_password, "auth": kp_default_docker_auth}
#@  kp_default_docker_configjson = base64.encode(json.encode({"auths": {kp_default_registry: kp_default_docker_creds}}))
---
apiVersion: v1
kind: Secret
metadata:
  name:  kp-default-repository-secret
  namespace: kpack
  annotations:
    kapp.k14s.io/versioned: ""
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: #@ kp_default_docker_configjson
#@ end
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kp-default-repository-serviceaccount
  namespace: kpack
imagePullSecrets:
  - name: #@ secret_name
secrets:
  - name: #@ secret_name
---
apiVersion: v1
kind: ConfigMap
metadata:
  name:  kp-config
  namespace: kpack
data:
  default.repository: #@ data.values.kp_default_repository
  default.repository.serviceaccount: kp-default-repository-serviceaccount

#@overlay/match by=overlay.subset({"metadata":{"name":"kpack-controller"}, "kind": "Deployment"})
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: controller
          #@overlay/match missing_ok=True
          env:
            #@overlay/append
            - name: CREDENTIAL_PROVIDER_SECRET_PATH
              value: /var/kpack/credentials
          #@overlay/match missing_ok=True
          volumeMounts:
            #@overlay/append
            - name: credentials
              mountPath: /var/kpack/credentials
              readOnly: true
      #@overlay/match missing_ok=True
      volumes:
        #@overlay/append
        - name: credentials
          secret:
            secretName:  #@ secret_name

#@ end